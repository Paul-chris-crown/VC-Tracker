// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  BACKLOG
  TODO
  IN_PROGRESS
  BLOCKED
  REVIEW
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Role {
  OWNER
  ADMIN
  MANAGER
  MEMBER
  VIEWER
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  memberships Membership[]
  createdTasks Task[] @relation("TaskCreator")
  assignedTasks TaskAssignee[]
  comments Comment[]
  activities Activity[]
  timeEntries TimeEntry[]
  notifications Notification[]
  invites Invite[]
  leadProjects Project[] @relation("ProjectLead")
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  logo      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  memberships Membership[]
  projects Project[]
  labels Label[]
  invites Invite[]

  @@map("organizations")
}

model Membership {
  id             String @id @default(cuid())
  role           Role   @default(MEMBER)
  userId         String
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("memberships")
}

model Project {
  id           String    @id @default(cuid())
  organizationId String
  name         String
  key          String
  description  String?
  leadId       String?
  startDate    DateTime?
  dueDate      DateTime?
  status       Status    @default(TODO)
  priority     Priority  @default(MEDIUM)
  budgetCents  Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  lead         User?       @relation("ProjectLead", fields: [leadId], references: [id])
  epics        Epic[]
  tasks        Task[]
  files        File[]
  activities   Activity[]
  timeEntries  TimeEntry[]

  @@unique([organizationId, key])
  @@map("projects")
}

model Epic {
  id        String   @id @default(cuid())
  projectId String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks   Task[]

  @@map("epics")
}

model Task {
  id           String    @id @default(cuid())
  projectId    String
  epicId       String?
  parentTaskId String?
  title        String
  description  String?
  status       Status    @default(TODO)
  priority     Priority  @default(MEDIUM)
  points       Int?
  startDate    DateTime?
  dueDate      DateTime?
  orderIndex   Int       @default(0)
  createdById  String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  project      Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  epic         Epic?     @relation(fields: [epicId], references: [id])
  parentTask   Task?     @relation("Subtask", fields: [parentTaskId], references: [id])
  subtasks     Task[]    @relation("Subtask")
  createdBy    User      @relation("TaskCreator", fields: [createdById], references: [id])
  assignees    TaskAssignee[]
  labels       TaskLabel[]
  comments     Comment[]
  files        File[]
  activities   Activity[]
  timeEntries  TimeEntry[]

  @@map("tasks")
}

model TaskAssignee {
  id     String @id @default(cuid())
  taskId String
  userId String

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
  @@map("task_assignees")
}

model Label {
  id             String @id @default(cuid())
  name           String
  color          String
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  tasks        TaskLabel[]

  @@map("labels")
}

model TaskLabel {
  id      String @id @default(cuid())
  taskId  String
  labelId String

  // Relations
  task  Task  @relation(fields: [taskId], references: [id], onDelete: Cascade)
  label Label @relation(fields: [labelId], references: [id], onDelete: Cascade)

  @@unique([taskId, labelId])
  @@map("task_labels")
}

model Comment {
  id        String   @id @default(cuid())
  taskId    String
  authorId  String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model File {
  id        String   @id @default(cuid())
  url       String
  name      String
  size      Int
  taskId    String?
  projectId String?
  createdAt DateTime @default(now())

  // Relations
  task    Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("files")
}

model TimeEntry {
  id         String    @id @default(cuid())
  taskId     String
  userId     String
  projectId  String?
  startedAt  DateTime
  endedAt    DateTime?
  seconds    Int
  billable   Boolean   @default(false)
  rateCents  Int       @default(0)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("time_entries")
}

model Activity {
  id        String   @id @default(cuid())
  type      String
  meta      Json
  projectId String?
  taskId    String?
  actorId   String
  createdAt DateTime @default(now())

  // Relations
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task    Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  actor   User     @relation(fields: [actorId], references: [id], onDelete: Cascade)

  @@map("activities")
}

model Invite {
  id             String    @id @default(cuid())
  email          String
  organizationId String
  userId         String?
  role           Role      @default(MEMBER)
  token          String    @unique
  accepted       Boolean   @default(false)
  createdAt      DateTime  @default(now())

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User?       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("invites")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  body      String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
